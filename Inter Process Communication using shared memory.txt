#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>
#include <sys/wait.h> // Added header file for wait function

#define SHM_SIZE 1024

int main() {
    int shmid;
    key_t key;
    char *shmaddr;

    // Generate a unique key
    key = ftok(".", 'S');
    if (key == -1) {
        perror("ftok");
        exit(1);
    }

    // Create a shared memory segment
    shmid = shmget(key, SHM_SIZE, IPC_CREAT | 0666);
    if (shmid == -1) {
        perror("shmget");
        exit(1);
    }

    // Attach the shared memory segment
    shmaddr = shmat(shmid, NULL, 0);
    if (shmaddr == (char *) -1) {
        perror("shmat");
        exit(1);
    }

    // Write data into the shared memory segment
    strcpy(shmaddr, "Hello, world!");

    // Detach the shared memory segment
    shmdt(shmaddr);

    // Fork a child process
    pid_t pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(1);
    }

    if (pid == 0) {
        // Child process
        // Attach the shared memory segment
        shmaddr = shmat(shmid, NULL, 0);
        if (shmaddr == (char *) -1) {
            perror("shmat");
            exit(1);
        }

        // Read data from the shared memory segment
        printf("Child process read: %s\n", shmaddr);

        // Detach the shared memory segment
        shmdt(shmaddr);
    } else {
        // Parent process

        // Wait for the child process to finish
        if (wait(NULL) == -1) {
            perror("wait");
            exit(1);
        }

        // Delete the shared memory segment
        if (shmctl(shmid, IPC_RMID, NULL) == -1) {
            perror("shmctl");
            exit(1);
        }
    }

    return 0;
}
