I)  Single Level Directory
#include <stdio.h> 
#include <string.h> // Added for strcmp function
struct {
    char dname[10], fname[10][10]; 
    int fcnt;
} dir;
int main() {
    int i, ch; 
    char f[30]; 
    dir.fcnt = 0;  
    printf("\nEnter name of directory -- "); 
    scanf("%s", dir.dname);
    while(1) {
        printf("\n\n1. Create File\t2. Delete File\t3. Search File \n4. Display Files\t5. Exit\nEnter your choice -- "); 
        scanf("%d", &ch);    
        switch(ch) {
            case 1: 
                printf("\nEnter the name of the file -- "); 
                scanf("%s", dir.fname[dir.fcnt]); 
                dir.fcnt++; 
                break;           
            case 2: 
                printf("\nEnter the name of the file -- "); 
                scanf("%s", f); 
                for(i = 0; i < dir.fcnt; i++) {
                    if(strcmp(f, dir.fname[i]) == 0) {
                        printf("File %s is deleted ", f); 
                        strcpy(dir.fname[i], dir.fname[dir.fcnt - 1]); 
                        break;
                    }
                }
                if(i == dir.fcnt)
                    printf("File %s not found", f);
                else
                    dir.fcnt--;
                break;
                
            case 3: 
                printf("\nEnter the name of the file -- ");
                scanf("%s", f);
                for(i = 0; i < dir.fcnt; i++) {
                    if(strcmp(f, dir.fname[i]) == 0) {
                        printf("File %s is found ", f);
                        break;
                    }
                }
                if(i == dir.fcnt)
                    printf("File %s not found", f);
                break;
                
            case 4: 
                if(dir.fcnt == 0)
                    printf("\nDirectory Empty");
                else {
                    printf("\nThe Files are -- ");
                    for(i = 0; i < dir.fcnt; i++)
                        printf("\t%s", dir.fname[i]);
                }
                break;
                
            default: 
                return 0;
        }    }
    return 0; }
 




ii) Two Level Directory 
#include <stdio.h>
#include <string.h>

struct Directory {
    char dname[10];
    char fname[10][10];
    int fcnt;
};

int main() {
    struct Directory dir[10];
    int i, ch, dcnt = 0, k;
    char f[30], d[30];

    while (1) {
        printf("\n\n1. Create Directory\t2. Create File\t3. Delete File\n");
        printf("4. Search File\t\t5. Display\t6. Exit\nEnter your choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 1:
                printf("\nEnter name of directory: ");
                scanf("%s", dir[dcnt].dname);
                dir[dcnt].fcnt = 0;
                dcnt++;
                printf("Directory created");
                break;

            case 2:
                printf("\nEnter name of the directory: ");
                scanf("%s", d);
                for (i = 0; i < dcnt; i++) {
                    if (strcmp(d, dir[i].dname) == 0) {
                        printf("Enter name of the file: ");
                        scanf("%s", dir[i].fname[dir[i].fcnt]);
                        dir[i].fcnt++;
                        printf("File created");
                        break;
                    }
                }
                if (i == dcnt)
                    printf("Directory %s not found", d);
                break;

            case 3:
                printf("\nEnter name of the directory: ");
                scanf("%s", d);
                for (i = 0; i < dcnt; i++) {
                    if (strcmp(d, dir[i].dname) == 0) {
                        printf("Enter name of the file: ");
                        scanf("%s", f);
                        int found = 0;
                        for (k = 0; k < dir[i].fcnt; k++) {
                            if (strcmp(f, dir[i].fname[k]) == 0) {
                                printf("File %s is deleted", f);
                                dir[i].fcnt--;
                                strcpy(dir[i].fname[k], dir[i].fname[dir[i].fcnt]);
                                found = 1;
                                break;
                            }
                        }
                        if (!found)
                            printf("File %s not found", f);
                        break;
                    }
                }
                if (i == dcnt)
                    printf("Directory %s not found", d);
                break;

            case 4:
                printf("\nEnter name of the directory: ");
                scanf("%s", d);
                for (i = 0; i < dcnt; i++) {
                    if (strcmp(d, dir[i].dname) == 0) {
                        printf("Enter the name of the file: ");
                        scanf("%s", f);
                        int found = 0;
                        for (k = 0; k < dir[i].fcnt; k++) {
                            if (strcmp(f, dir[i].fname[k]) == 0) {
                                printf("File %s is found", f);
                                found = 1;
                                break;
                            }
                        }
                        if (!found)
                            printf("File %s not found", f);
                        break;
                    }
                }
                if (i == dcnt)
                    printf("Directory %s not found", d);
                break;

            case 5:
                if (dcnt == 0)
                    printf("\nNo Directories");
                else {
                    printf("\nDirectories\tFiles");
                    for (i = 0; i < dcnt; i++) {
                        printf("\n%s\t\t", dir[i].dname);
                        for (k = 0; k < dir[i].fcnt; k++)
                            printf("\t%s", dir[i].fname[k]);
                    }
                }
                break;

            case 6:
                return 0;

            default:
                printf("Invalid choice. Please try again.");
                break;
        }
    }

    return 0;
}

